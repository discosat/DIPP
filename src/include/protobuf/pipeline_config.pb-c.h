/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: protos/pipeline_config.proto */

#ifndef PROTOBUF_C_protos_2fpipeline_5fconfig_2eproto__INCLUDED
#define PROTOBUF_C_protos_2fpipeline_5fconfig_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif


typedef struct Implementation Implementation;
typedef struct ModuleDefinition ModuleDefinition;
typedef struct PipelineDefinition PipelineDefinition;


/* --- enums --- */

typedef enum _EffortLevel {
  EFFORT_LEVEL__DEFAULT = 0,
  EFFORT_LEVEL__LOW = 1,
  EFFORT_LEVEL__MEDIUM = 2,
  EFFORT_LEVEL__HIGH = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EFFORT_LEVEL)
} EffortLevel;

/* --- messages --- */

/*
 * Implementation details for a module
 */
struct  Implementation
{
  ProtobufCMessage base;
  int32_t param_id;
  EffortLevel effort_level;
};
#define IMPLEMENTATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&implementation__descriptor) \
    , 0, EFFORT_LEVEL__DEFAULT }


/*
 * Module execution information
 */
struct  ModuleDefinition
{
  ProtobufCMessage base;
  char *name;
  int32_t n_implementations;
  size_t n_implementations;
  Implementation **implementations;
};
#define MODULE_DEFINITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&module_definition__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0,NULL }


/*
 * Define a message type for pipeline configuration
 */
struct  PipelineDefinition
{
  ProtobufCMessage base;
  int32_t n_module_configs;
  size_t n_modules;
  ModuleDefinition **modules;
};
#define PIPELINE_DEFINITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pipeline_definition__descriptor) \
    , 0, 0,NULL }


/* Implementation methods */
void   implementation__init
                     (Implementation         *message);
size_t implementation__get_packed_size
                     (const Implementation   *message);
size_t implementation__pack
                     (const Implementation   *message,
                      uint8_t             *out);
size_t implementation__pack_to_buffer
                     (const Implementation   *message,
                      ProtobufCBuffer     *buffer);
Implementation *
       implementation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   implementation__free_unpacked
                     (Implementation *message,
                      ProtobufCAllocator *allocator);
/* ModuleDefinition methods */
void   module_definition__init
                     (ModuleDefinition         *message);
size_t module_definition__get_packed_size
                     (const ModuleDefinition   *message);
size_t module_definition__pack
                     (const ModuleDefinition   *message,
                      uint8_t             *out);
size_t module_definition__pack_to_buffer
                     (const ModuleDefinition   *message,
                      ProtobufCBuffer     *buffer);
ModuleDefinition *
       module_definition__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   module_definition__free_unpacked
                     (ModuleDefinition *message,
                      ProtobufCAllocator *allocator);
/* PipelineDefinition methods */
void   pipeline_definition__init
                     (PipelineDefinition         *message);
size_t pipeline_definition__get_packed_size
                     (const PipelineDefinition   *message);
size_t pipeline_definition__pack
                     (const PipelineDefinition   *message,
                      uint8_t             *out);
size_t pipeline_definition__pack_to_buffer
                     (const PipelineDefinition   *message,
                      ProtobufCBuffer     *buffer);
PipelineDefinition *
       pipeline_definition__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pipeline_definition__free_unpacked
                     (PipelineDefinition *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Implementation_Closure)
                 (const Implementation *message,
                  void *closure_data);
typedef void (*ModuleDefinition_Closure)
                 (const ModuleDefinition *message,
                  void *closure_data);
typedef void (*PipelineDefinition_Closure)
                 (const PipelineDefinition *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    effort_level__descriptor;
extern const ProtobufCMessageDescriptor implementation__descriptor;
extern const ProtobufCMessageDescriptor module_definition__descriptor;
extern const ProtobufCMessageDescriptor pipeline_definition__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_protos_2fpipeline_5fconfig_2eproto__INCLUDED */
